/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * Nov 13, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "argsParser.hpp"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include "rocksDBWrapper.hpp"
#include <iostream>

int main(const int argc, const char** argv)
{
    try
    {
        CmdLineArgs cmdLineArgs(argc, argv);

        auto columQuery = cmdLineArgs.getColumnQuery();
        auto rocksDB = Utils::RocksDBWrapper(cmdLineArgs.getDBPath(), cmdLineArgs.getColumnFamilies());
        auto fbs = cmdLineArgs.getFbsPath();
        auto requestedKey = cmdLineArgs.getKey();

        flatbuffers::IDLOptions options;
        options.strict_json = true;
        flatbuffers::Parser parser(options);
        std::string schemaStr;

        if (!fbs.empty())
        {
            if (!flatbuffers::LoadFile(fbs.c_str(), false, &schemaStr))
            {
                throw std::runtime_error("Unable to load schema file.");
            }
            if (!parser.Parse(schemaStr.c_str()))
            {
                throw std::runtime_error("Unable to parse schema file.");
            }
        }

        auto printValue = [&](const std::string& key, const auto& slice)
        {
            if (fbs.empty())
            {
                std::cout << key << " ==> " << slice.ToString() << std::endl;
            }
            else
            {
                std::string strData;
                flatbuffers::GenText(parser, reinterpret_cast<const uint8_t*>(slice.data()), &strData);

                std::cout << key << " ==> " << strData << std::endl;
            }
        };

        if (requestedKey.empty())
        {
            for (const auto& [key, value] : rocksDB.begin(columQuery))
            {
                printValue(key, value);
            }
        }
        else
        {
            rocksdb::PinnableSlice slice;
            if (!rocksDB.get(columQuery, requestedKey, slice))
            {
                throw std::runtime_error("Unable to find resource.");
            }
            printValue(requestedKey, slice);
        }
    }
    catch (const std::exception& e)
    {
        std::cerr << e.what() << std::endl;
        CmdLineArgs::showHelp();
        return 1;
    }

    return 0;
}
