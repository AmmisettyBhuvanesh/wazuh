/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * Oct 26, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "argsParser.hpp"
#include "databaseFeedManager.hpp"
#include "json.hpp"
#include "loggerHelper.h"
#include "routerModule.hpp"
#include "routerProvider.hpp"
#include "singleton.hpp"
#include "versionMatcher/versionMatcher.hpp"
#include <filesystem>
#include <iostream>

/**
 * @brief Dummy class to replace real IndexerConnector.
 *
 */
class DummyIndexerConnector
{
public:
    /**
     * @brief No operation method.
     *
     * @param message
     */
    void publish(const std::string& message) {}
};

/**
 * @brief Dummy class to replace real PolicyManager.
 *
 */
class DummyPolicyManager : public Singleton<DummyPolicyManager>
{
public:
    /**
     * @brief This method sets the topic for the subscriber.
     *
     * @param topic The topic to subscribe to.
     */
    void setUpdaterConfiguration(const std::string& topic)
    {
        m_topic = topic;
    }

    /**
     * @brief Retrieves the UpdaterConfiguration.
     *
     * @return nlohmann::json A simple JSON object with the configured topic.
     */
    nlohmann::json getUpdaterConfiguration()
    {
        auto updaterConfiguration = nlohmann::json::object();
        updaterConfiguration["topicName"] = m_topic;
        return updaterConfiguration;
    }

private:
    std::string m_topic;
};

/**
 * @brief Dummy class to replace real ContentRegister.
 *
 */
class DummyContentRegister
{
public:
    /**
     * @brief Constructor of the dummy class
     *
     * @param obj1 Not used.
     * @param obj2 Not used.
     */
    DummyContentRegister(const nlohmann::json& obj1, const nlohmann::json& obj2) {}

    /**
     * @brief No operation method.
     *
     * @param interval Not used.
     */
    void changeSchedulerInterval(long unsigned int interval) {}
};

/**
 * @brief Creates a version object using the string and type specified.
 *
 * @param version string version item to create object from
 * @param type version object type to create from enum VersionObjectType
 * @return std::shared_ptr<IVersionObject>
 */
std::shared_ptr<IVersionObject> createVersionObject(const std::string& version, VersionObjectType type)
{
    CalVer calVer {};
    PEP440 pep440 {};
    MajorMinor majorMinor {};
    SemVer semVer {};
    Dpkg dpkgVer {};
    switch (type)
    {
        default: logDebug2(WM_VULNSCAN_LOGTAG, "Error creating VersionObject. Invalid type"); return nullptr;
        case VersionObjectType::Unspecified:
            if (VersionObjectCalVer::match(version, calVer))
            {
                return std::make_shared<VersionObjectCalVer>(calVer);
            }
            else if (VersionObjectPEP440::match(version, pep440))
            {
                return std::make_shared<VersionObjectPEP440>(pep440);
            }
            else if (VersionObjectMajorMinor::match(version, majorMinor))
            {
                return std::make_shared<VersionObjectMajorMinor>(majorMinor);
            }
            else if (VersionObjectDpkg::match(version, dpkgVer))
            {
                return std::make_shared<VersionObjectDpkg>(dpkgVer);
            }
            else if (VersionObjectSemVer::match(version, semVer))
            {
                return std::make_shared<VersionObjectSemVer>(semVer);
            }
            else
            {
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (Unspecified). Unrecognized type. "
                          "Version string: %s",
                          version.c_str());
                return nullptr;
            }
            break;

        case VersionObjectType::CalVer:
            if (VersionObjectCalVer::match(version, calVer))
            {
                return std::make_shared<VersionObjectCalVer>(calVer);
            }
            else
            {
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (CalVer). Version string dont match the "
                          "type specified. Version string: %s",
                          version.c_str());
                return nullptr;
            }
            break;

        case VersionObjectType::PEP440:
            if (VersionObjectPEP440::match(version, pep440))
            {
                return std::make_shared<VersionObjectPEP440>(pep440);
            }
            else
            {
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (PEP440). Version string dont match the "
                          "type specified. Version string: %s",
                          version.c_str());
                return nullptr;
            }
            break;
        case VersionObjectType::MajorMinor:
            if (VersionObjectMajorMinor::match(version, majorMinor))
            {
                return std::make_shared<VersionObjectMajorMinor>(majorMinor);
            }
            else
            {
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (MajorMinor). Version string dont match "
                          "the type specified. Version string: %s",
                          version.c_str());
                return nullptr;
            }
            break;

        case VersionObjectType::SemVer:
            if (VersionObjectSemVer::match(version, semVer))
            {
                return std::make_shared<VersionObjectSemVer>(semVer);
            }
            else
            {
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (SemVer). Version string dont match the "
                          "type specified. Version string: %s",
                          version.c_str());
                return nullptr;
            }
            break;
        case VersionObjectType::DPKG:
            if (VersionObjectDpkg::match(version, dpkgVer))
            {
                return std::make_shared<VersionObjectDpkg>(dpkgVer);
            }
            else
            {
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (dpkg). Version string dont match the "
                          "type specified. Version string: %s",
                          version.c_str());
                return nullptr;
            }
            break;
    }
}

int main(const int argc, const char* argv[])
{
    try
    {

        // LOGLEVEL_INFO, tag, sourceFile.file, sourceFile.line, sourceFile.func, formattedStr
        Log::assignLogFunction([](const int,
                                  const std::string& tag,
                                  const std::string& file,
                                  const int line,
                                  const std::string&,
                                  const std::string& str)
                               { std::cout << tag << "->" << file << ":" << line << " " << str << std::endl; });
        // Reset required directories
        if (std::filesystem::exists("./queue/vd"))
        {
            std::remove("./queue/vd");
        }
        std::filesystem::create_directories("./queue/vd");

        CmdLineArgs cmdLineArgs(argc, argv);

        // Read json configuration file
        auto configuration = nlohmann::json::parse(std::ifstream(cmdLineArgs.getConfigurationFilePath()));

        RouterModule::instance().start();
        auto routerProvider = std::make_shared<RouterProvider>(configuration.at("topicName"));
        routerProvider->start();

        DummyPolicyManager::instance().setUpdaterConfiguration(configuration.at("topicName"));

        auto databaseFeedManager =
            std::make_shared<TDatabaseFeedManager<DummyIndexerConnector, DummyPolicyManager, DummyContentRegister>>(
                std::make_shared<DummyIndexerConnector>(), false);

        auto baseLine = R"(
        {
            "paths":
            [
            ],
            "stageStatus":
            [
                {
                    "stage": "download",
                    "status": "ok"
                }
            ]
        }
        )"_json;

        baseLine["type"] = cmdLineArgs.getFormatInputFiles();
        for (const auto& path : cmdLineArgs.getInputFiles())
        {
            baseLine["paths"].push_back(path);
        }

        const auto payload = baseLine.dump();
        const auto message = std::vector<char>(payload.begin(), payload.end());

        routerProvider->send(message);
        uint64_t amountFailed {0};
        uint64_t totalPackges {0};
        if (cmdLineArgs.getWaitTime() > 0)
        {
            std::this_thread::sleep_for(std::chrono::seconds(cmdLineArgs.getWaitTime()));
        }
        else
        {
            std::cout << "Press enter twice to stop the tool..." << std::endl;
            if (!cmdLineArgs.getConfigurationVersionMatcher().compare("yes"))
            {
                std::cout << "Verification process enabled. Press enter to start" << std::endl;
                std::cin.get();
                auto printValue =
                    [&](const std::string& version, const std::string& packageName, const std::string& CVE)
                {
                    std::cout << "=== WARNING === \t Package " << packageName << " unable to create. INFO: Version ==> "
                              << version << " CVE ==> " << CVE << "\n"
                              << std::endl;
                };

                VersionObjectType type = VersionObjectType::Unspecified;

                for (const auto& [key, db] : databaseFeedManager->getAllVulnerabilitiesCandidates())
                {
                    for (const auto& [dbKey, dbValue] : db->begin())
                    {
                        auto candidatesArray =
                            GetScanVulnerabilityCandidateArray(reinterpret_cast<const uint8_t*>(dbValue.data()));

                        if (candidatesArray)
                        {
                            for (const auto& candidate : *candidatesArray->candidates())
                            {
                                auto candidatesVersions = candidate->versions();

                                if (candidatesVersions)
                                {
                                    for (const auto& versionTable : *candidatesVersions)
                                    {
                                        auto pVersionObject = createVersionObject(versionTable->version()->str(), type);
                                        if (!pVersionObject)
                                        {
                                            printValue(
                                                versionTable->version()->str(), dbKey, candidate->cveId()->str());
                                            amountFailed++;
                                            totalPackges++;
                                        }
                                        else
                                        {
                                            totalPackges++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        std::cout << "Total packages analyzed " << totalPackges << " and get " << amountFailed << " fail ("
                  << ((double)(amountFailed) / totalPackges) * 100 << "%)" << std::endl;
        databaseFeedManager.reset();
    }
    catch (const std::exception& e)
    {
        std::cerr << e.what() << std::endl;
        CmdLineArgs::showHelp();
        return 1;
    }
    return 0;
}
