/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * September 21, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "storeModel_test.hpp"
#include "cve5_generated.h"
#include "cve5_schema.h"
#include "databaseFeedManager/eventContext.hpp"
#include "databaseFeedManager/storeModel.hpp"
#include <memory>
#include <string>
#include <vector>

const std::string CVE_UPDATE_EXAMPLE_SUCCESS {"CVE-2022-0605"};
const std::string CVE5_ENTRY {
    R"(
            {
                "containers": {
                    "cna": {
                        "affected": [
                            {
                            "cpes": [
                                "cpe:2.3:a:google:chrome:*:*:*:*:*:*:*:*"
                            ],
                            "defaultStatus": "unaffected",
                            "product": "chrome",
                            "vendor": "google",
                            "versions": [
                                {
                                "lessThan": "98.0.4758.102",
                                "status": "affected",
                                "version": "0",
                                "versionType": "custom"
                                }
                            ]
                            }
                        ],
                        "descriptions": [
                            {
                            "lang": "en",
                            "value": "Use after free in Webstore API in Google Chrome prior to 98.0.4758.102 allowed an attacker who convinced a user to install a malicious extension and convinced a user to enage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."
                            }
                        ],
                        "metrics": [
                            {
                            "cvssV3_1": {
                                "attackComplexity": "LOW",
                                "attackVector": "NETWORK",
                                "availabilityImpact": "HIGH",
                                "baseScore": 8.8,
                                "baseSeverity": "HIGH",
                                "confidentialityImpact": "HIGH",
                                "integrityImpact": "HIGH",
                                "privilegesRequired": "NONE",
                                "scope": "UNCHANGED",
                                "userInteraction": "REQUIRED",
                                "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
                                "version": "3.1"
                            },
                            "format": "CVSS"
                            }
                        ],
                        "problemTypes": [
                            {
                            "descriptions": [
                                {
                                "description": "CWE-416",
                                "lang": "en"
                                }
                            ]
                            }
                        ],
                        "providerMetadata": {
                            "orgId": "00000000-0000-4000-A000-000000000003",
                            "shortName": "nvd",
                            "dateUpdated": "2022-04-11T09:33:00Z"
                        },
                        "references": [
                            {
                            "name": "https://crbug.com/1286940",
                            "tags": [
                                "issue-tracking",
                                "permissions-required",
                                "vendor-advisory"
                            ],
                            "url": "https://crbug.com/1286940"
                            }
                        ],
                        "x_translations": [
                            {
                                "identifier": "WT-1",
                                "target": "windows",
                                "source": {
                                    "vendor": "Google Corporation",
                                    "product": "Chrome",
                                    "version": ""
                                },
                                "translation": [{
                                    "vendor": "google",
                                    "product": "chrome",
                                    "version": ""
                                }],
                                "action": [
                                    0,
                                    1
                                ]
                            }
                        ]
                    }
                },
                "cveMetadata": {
                    "assignerOrgId": "00000000-0000-4000-A000-000000000003",
                    "assignerShortName": "nvd",
                    "cveId": "CVE-2022-0605",
                    "datePublished": "2022-04-05T00:15:00Z",
                    "dateUpdated": "2022-04-11T09:33:00Z",
                    "state": "PUBLISHED"
                },
                "dataType": "CVE_RECORD",
                "dataVersion": "5.0"
            })"};

/*
 * @brief Test instantiation of the StoreModel class.
 */
TEST_F(StoreModelTest, TestInstantiationOfTheStoreModelClass)
{
    std::map<std::string, std::unique_ptr<Utils::RocksDBWrapper>> candidatesDatabase;
    // Instantiation of the StoreModel class.
    EXPECT_THROW(std::make_shared<StoreModel>(candidatesDatabase, nullptr, nullptr, nullptr), std::runtime_error);
}

/*
 * @brief Test handleRequest of the StoreModel class.
 */
TEST_F(StoreModelTest, TestHandleRequest)
{
    std::vector<char> message;
    nlohmann::json resource;

    flatbuffers::Parser parser;
    ASSERT_TRUE(parser.Parse(cve5_SCHEMA) && parser.Parse(CVE5_ENTRY.c_str()));

    flatbuffers::FlatBufferBuilder& builder = parser.builder_;

    auto cvesDatabase = std::make_unique<Utils::RocksDBWrapper>("temp");
    std::shared_ptr<EventContext> eventContext = std::make_shared<EventContext>(
        EventContext {.message = message, .resource = resource, .cvesDatabase = cvesDatabase});

    eventContext->cve5Buffer = builder.Release();

    std::shared_ptr<StoreModel> storeModel;
    std::map<std::string, std::unique_ptr<Utils::RocksDBWrapper>> candidatesDatabase;

    std::unique_ptr<Utils::RocksDBWrapper> vulnerabilityDescription =
        std::make_unique<Utils::RocksDBWrapper>("tempDesc");
    std::unique_ptr<Utils::RocksDBWrapper> vulnerabilityRemediations =
        std::make_unique<Utils::RocksDBWrapper>("tempRem");
    std::unique_ptr<Utils::RocksDBWrapper> vulnerabilityTranslations =
        std::make_unique<Utils::RocksDBWrapper>("tempTrans");

    // Instantiation of the StoreModel class.
    EXPECT_NO_THROW(storeModel = std::make_shared<StoreModel>(candidatesDatabase,
                                                              vulnerabilityDescription.get(),
                                                              vulnerabilityRemediations.get(),
                                                              vulnerabilityTranslations.get()));

    // HandleRequest
    EXPECT_NO_THROW(storeModel->handleRequest(eventContext));
}
