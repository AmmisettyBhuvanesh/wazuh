/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * October 12, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "updateTranslation_test.hpp"

const std::string CVE_UPDATE_EXAMPLE_SUCCESS {"CVE-2022-0605"};
const std::string UPDATE_EXAMPLE_SUCCESS {
    R"(
            {
                "containers": {
                    "cna": {
                        "affected": [
                            {
                            "cpes": [
                                "cpe:2.3:a:google:chrome:*:*:*:*:*:*:*:*"
                            ],
                            "defaultStatus": "unaffected",
                            "product": "chrome",
                            "vendor": "google",
                            "versions": [
                                {
                                "lessThan": "98.0.4758.102",
                                "status": "affected",
                                "version": "0",
                                "versionType": "custom"
                                }
                            ]
                            }
                        ],
                        "descriptions": [
                            {
                            "lang": "en",
                            "value": "Use after free in Webstore API in Google Chrome prior to 98.0.4758.102 allowed an attacker who convinced a user to install a malicious extension and convinced a user to enage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."
                            }
                        ],
                        "metrics": [
                            {
                            "cvssV3_1": {
                                "attackComplexity": "LOW",
                                "attackVector": "NETWORK",
                                "availabilityImpact": "HIGH",
                                "baseScore": 8.8,
                                "baseSeverity": "HIGH",
                                "confidentialityImpact": "HIGH",
                                "integrityImpact": "HIGH",
                                "privilegesRequired": "NONE",
                                "scope": "UNCHANGED",
                                "userInteraction": "REQUIRED",
                                "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
                                "version": "3.1"
                            },
                            "format": "CVSS"
                            }
                        ],
                        "problemTypes": [
                            {
                            "descriptions": [
                                {
                                "description": "CWE-416",
                                "lang": "en"
                                }
                            ]
                            }
                        ],
                        "providerMetadata": {
                            "orgId": "00000000-0000-4000-A000-000000000003",
                            "shortName": "nvd",
                            "dateUpdated": "2022-04-11T09:33:00Z"
                        },
                        "references": [
                            {
                            "name": "https://crbug.com/1286940",
                            "tags": [
                                "issue-tracking",
                                "permissions-required",
                                "vendor-advisory"
                            ],
                            "url": "https://crbug.com/1286940"
                            }
                        ]
                    }
                },
                "cveMetadata": {
                    "assignerOrgId": "00000000-0000-4000-A000-000000000003",
                    "assignerShortName": "nvd",
                    "cveId": "CVE-2022-0605",
                    "datePublished": "2022-04-05T00:15:00Z",
                    "dateUpdated": "2022-04-11T09:33:00Z",
                    "state": "PUBLISHED"
                },
                "dataType": "CVE_RECORD",
                "dataVersion": "5.0"
            })"};

const std::string CVE_CREATE_EXAMPLE_SUCCESS {"CVE-2022-24753"};
const std::string CREATE_EXAMPLE_SUCCESS {
    R"(        {
            "containers": {
                "cna": {
                    "affected": [
                        {
                            "cpes": [
                                "cpe:2.3:a:stripe:stripe_cli:*:*:*:*:*:*:*:*"
                            ],
                            "defaultStatus": "unaffected",
                            "platforms": [
                                "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*"
                            ],
                            "product": "stripe_cli",
                            "vendor": "stripe",
                            "versions": [
                                {
                                    "lessThan": "1.7.13",
                                    "status": "affected",
                                    "version": "0",
                                    "versionType": "custom"
                                }
                            ]
                        }
                    ],
                    "descriptions": [
                        {
                            "lang": "en",
                            "value": "Stripe CLI is a command-line tool for the Stripe eCommerce platform. A vulnerability in Stripe CLI exists on Windows when certain commands are run in a directory where an attacker has planted files. The commands are `stripe login`, `stripe config -e`, `stripe community`, and `stripe open`. MacOS and Linux are unaffected. An attacker who successfully exploits the vulnerability can run arbitrary code in the context of the current user. The update addresses the vulnerability by throwing an error in these situations before the code can run.Users are advised to upgrade to version 1.7.13. There are no known workarounds for this issue."
                        }
                    ],
                    "metrics": [
                        {
                            "cvssV2_0": {
                                "accessComplexity": "MEDIUM",
                                "accessVector": "LOCAL",
                                "authentication": "NONE",
                                "availabilityImpact": "PARTIAL",
                                "baseScore": 4.4,
                                "confidentialityImpact": "PARTIAL",
                                "integrityImpact": "PARTIAL",
                                "vectorString": "AV:L/AC:M/Au:N/C:P/I:P/A:P",
                                "version": "2.0"
                            },
                            "format": "CVSS"
                        }
                    ],
                    "problemTypes": [
                        {
                            "descriptions": [
                                {
                                    "description": "NVD-CWE-noinfo",
                                    "lang": "en"
                                }
                            ]
                        }
                    ],
                    "providerMetadata": {
                        "orgId": "00000000-0000-4000-A000-000000000003",
                        "shortName": "nvd",
                        "dateUpdated": "2022-03-12T02:51:00Z"
                    },
                    "references": [
                        {
                            "name": "https://github.com/stripe/stripe-cli/commit/be38da5c0191adb77f661f769ffff2fbc7ddf6cd",
                            "tags": [
                                "patch",
                                "third-party-advisory"
                            ],
                            "url": "https://github.com/stripe/stripe-cli/commit/be38da5c0191adb77f661f769ffff2fbc7ddf6cd"
                        }
                    ]
                }
            },
            "cveMetadata": {
                "assignerOrgId": "00000000-0000-4000-A000-000000000003",
                "assignerShortName": "nvd",
                "cveId": "CVE-2022-24753",
                "datePublished": "2022-03-09T23:15:00Z",
                "dateUpdated": "2022-03-12T02:51:00Z",
                "state": "PUBLISHED"
            },
            "dataType": "CVE_RECORD",
            "dataVersion": "5.0"
        })"};

TEST_F(UpdateTranslationTest, UpdateTranslationEntrySuccess)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json updateExampleJSON = nlohmann::json::parse(UPDATE_EXAMPLE_SUCCESS);
    nlohmann::json translationsArray;
    translationsArray.emplace_back(nlohmann::json::parse(TRANSLATION_UPDATE));
    updateExampleJSON.at("containers").at("cna")["x_translations"] = translationsArray;
    UpdateTranslation::updateTranslationEntry(updateExampleJSON, rocksDbWrapper);

    // Read from rocksdb database.
    std::string translationEntryStr;
    rocksDbWrapper.get("WT-1", translationEntryStr);
    ASSERT_EQ(translationEntryStr.empty(), false);

    // Parse flatbuffer
    const NSVulnerabilityScanner::TranslationEntry* translationEntry =
        NSVulnerabilityScanner::GetTranslationEntry(translationEntryStr.c_str());
    EXPECT_EQ(translationEntry->target()->str(), "windows");

    auto sVendor = translationEntry->source()->vendor();
    auto* sProduct = translationEntry->source()->product();
    auto* sVersion = translationEntry->source()->version();
    auto* translationArray = translationEntry->translation();
    auto* tVendor = translationArray->Get(0)->vendor();
    auto* tProduct = translationArray->Get(0)->product();
    auto* tVersion = translationArray->Get(0)->version();

    EXPECT_EQ(sVendor->str(), "Google");
    EXPECT_EQ(sProduct->str(), "Chrome Browser");
    EXPECT_EQ(sVersion->size(), 0);
    EXPECT_EQ(tVendor->str(), "google");
    EXPECT_EQ(tProduct->str(), "chrome");
    EXPECT_EQ(tVersion->str(), "");
}

TEST_F(UpdateTranslationTest, CreateTranslationEntrySuccess)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Create Wazuh translation entry.
    nlohmann::json createExampleJSON = nlohmann::json::parse(CREATE_EXAMPLE_SUCCESS);
    nlohmann::json translationsArray;
    translationsArray.emplace_back(nlohmann::json::parse(TRANSLATION_CREATE));
    createExampleJSON.at("containers").at("cna")["x_translations"] = translationsArray;
    UpdateTranslation::updateTranslationEntry(createExampleJSON, rocksDbWrapper);

    // Read from rocksdb database.
    std::string translationEntryStr;
    rocksDbWrapper.get("WT-2", translationEntryStr);
    ASSERT_EQ(translationEntryStr.empty(), false);

    // Parse flatbuffer
    const NSVulnerabilityScanner::TranslationEntry* translationEntry =
        NSVulnerabilityScanner::GetTranslationEntry(translationEntryStr.c_str());
    EXPECT_EQ(translationEntry->target()->str(), "windows");

    auto sVendor = translationEntry->source()->vendor();
    auto* sProduct = translationEntry->source()->product();
    auto* sVersion = translationEntry->source()->version();
    auto* translationArray = translationEntry->translation();
    auto* tVendor = translationArray->Get(0)->vendor();
    auto* tProduct = translationArray->Get(0)->product();
    auto* tVersion = translationArray->Get(0)->version();

    EXPECT_EQ(sVendor->str(), "www\\.stripe\\.org");
    EXPECT_EQ(sProduct->str(), "Stripe");
    EXPECT_EQ(sVersion->size(), 0);
    EXPECT_EQ(tVendor->str(), "stripe");
    EXPECT_EQ(tProduct->str(), "stripe_cli");
    EXPECT_EQ(tVersion->str(), "");
}

TEST_F(UpdateTranslationTest, CreateEmptyTranslation)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Create Wazuh translation entry.
    nlohmann::json createExampleJSON = nlohmann::json::parse(CREATE_EXAMPLE_SUCCESS);
    nlohmann::json translationsArray;
    translationsArray.emplace_back(nlohmann::json::parse(TRANSLATION_EMPTY_EXAMPLE));
    createExampleJSON.at("containers").at("cna")["x_translations"] = translationsArray;

    try
    {
        UpdateTranslation::updateTranslationEntry(createExampleJSON, rocksDbWrapper);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), R"(Invalid format. Missing "identifier" key.)");
    }
    catch (...)
    {
        FAIL() << "Expected std::runtime_error";
    }
}
