/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * October 12, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "flatbuffers/flatbuffer_builder.h"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include "flatbuffers/util.h"
#include "rocksDBWrapper.hpp"
#include "updateTranslation.hpp"
#include "vulnerabilityTranslation_schema.h"
#include "gtest/gtest.h"
#include <filesystem>

constexpr auto DATABASE_PATH {"queue/vd"};

const std::string TRANSLATION_EXAMPLE {
    R"(
            {
                "identifier": "WT-1",
                "target": "windows",
                "source": {
                    "vendor": "Google Corporation",
                    "product": "Chrome",
                    "version": ""
                },
                "translation": [{
                    "vendor": "google",
                    "product": "chrome",
                    "version": ""
                }],
                "action": [
                    0,
                    1
                ]
            }
        )"};

const std::string TRANSLATION_UPDATE {
    R"(
            {
                "identifier": "WT-1",
                "target": "windows",
                "source": {
                    "vendor": "Google",
                    "product": "Chrome Browser",
                    "version": ""
                },
                "translation": [{
                    "vendor": "google",
                    "product": "chrome",
                    "version": ""
                }],
                "action": [
                    0,
                    1
                ]
            })"};

const std::string TRANSLATION_CREATE {
    R"(
            {
                "identifier": "WT-2",
                "target": "windows",
                "source": {
                    "vendor": "www\\.stripe\\.org",
                    "product": "Stripe",
                    "version": ""
                },
                "translation": [{
                    "vendor": "stripe",
                    "product": "stripe_cli",
                    "version": ""
                }],
                "action": [
                    0,
                    1
                ]
            })"};

const std::string TRANSLATION_EMPTY_EXAMPLE {
    R"(
            {}
    )"};

/**
 * @brief UpdateTranslation test class.
 *
 */
class UpdateTranslationTest : public ::testing::Test
{
protected:
    UpdateTranslationTest() = default;
    ~UpdateTranslationTest() override = default;

    /**
     * @brief Setup function.
     *
     */
    static void SetUpTestSuite()
    {
        std::filesystem::create_directories(DATABASE_PATH);

        ASSERT_EQ(TRANSLATION_EXAMPLE.empty(), false);

        // Parse schema and JSON example.
        flatbuffers::Parser parser1;
        auto valid = (parser1.Parse(vulnerabilityTranslation_SCHEMA) && parser1.Parse(TRANSLATION_EXAMPLE.c_str()));
        ASSERT_EQ(valid, true);

        // Get flatbuffer pointer
        uint8_t* buf1 = parser1.builder_.GetBufferPointer();
        size_t flatbufferSize1 = parser1.builder_.GetSize();

        Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

        // Save Wazuh translation
        const rocksdb::Slice VulnerabilityDescriptionSlice1(reinterpret_cast<const char*>(buf1), flatbufferSize1);
        rocksDbWrapper.put("WT-1", VulnerabilityDescriptionSlice1);
    }

    /**
     * @brief Teardown function.
     *
     */
    static void TearDownTestSuite()
    {
        std::filesystem::remove_all("queue");
    }
};
